#===============================================================================
    @file conversions.jl
    @brief Converts between different orientation representations
    @author Thaddeus Low <thaddeuslow@outlook.com>
    @date 11/01/2019
===============================================================================#
const P = -1                                                                    # Sign convention used (-ve)

## orientation to Quaternion converters
"""
    Quaternion(euler_angle)

Converts EulerAngles ‚Üí Quaternion{T}
"""
function Quaternion(ort::EulerAngles{Bunge, T}) where {T}
    œï‚ÇÅ = ort[1]
    Œ¶  = ort[2]
    œï‚ÇÇ = ort[3]

    œÉ = (œï‚ÇÅ + œï‚ÇÇ)/2
    Œ¥ = (œï‚ÇÅ - œï‚ÇÇ)/2
    c = cos(Œ¶/2)
    s = sin(Œ¶/2)

    sgn = sign(c*cos(œÉ))
    return  Quaternion{T}( sgn*c*cos(œÉ),
                          -sgn*P*s*cos(Œ¥),
                          -sgn*P*s*sin(Œ¥),
                          -sgn*P*c*sin(œÉ) )
end

"""
    Quaternion(rotation_matrix)

Converts 3x3 rotation matrix ‚Üí Quaternion{T}
"""
function Quaternion(rot::AbstractArray{T,2}) where {T}
    # compute quaternion components
    q‚ÇÄ = 1/2 * sqrt(1 + rot[1,1] + rot[2,2] + rot[3,3])
    q‚ÇÅ = P/2 * sqrt(1 + rot[1,1] - rot[2,2] - rot[3,3])
    q‚ÇÇ = P/2 * sqrt(1 - rot[1,1] + rot[2,2] - rot[3,3])
    q‚ÇÉ = P/2 * sqrt(1 - rot[1,1] - rot[2,2] + rot[3,3])

    # modify component signs if necessary
    if rot[3,2] < rot[2,3]
        q‚ÇÅ = -q‚ÇÅ
    end

    if rot[1,3] < rot[3,1]
        q‚ÇÇ = -q‚ÇÇ
    end

    if rot[2,1] < rot[1,2]
        q‚ÇÉ = -q‚ÇÉ
    end

    return normalize(Quaternion{T}(q‚ÇÄ, q‚ÇÅ, q‚ÇÇ, q‚ÇÉ))
end

"""
    Quaternion(axis_angle)

Converts AxisAngle{AxisAng} ‚Üí Quaternion{T}
"""
function Quaternion(ort::AxisAngle{AxisAng, T}) where {T}
  Œ∏ = ort.angle/2
  s = sin(Œ∏)
  c = cos(Œ∏)
  nÃÇ = ort.axis
  return Quaternion{T}([c, nÃÇ[1]*s, nÃÇ[2]*s, nÃÇ[3]*s])
end

## orientation ‚Üí EulerAngles converters
"""
    EulerAngles(rotation_matrix)

Converts 3x3 rotation matrix ‚Üí EulerAngles{Bunge}
"""
function EulerAngles(::Type{Bunge}, Œ±::AbstractArray{T,2}) where {T}
  if abs(Œ±[3,3]) == 1
    ùú≠ = EulerAngles{Bunge,T}(atan(Œ±[1,2], Œ±[1,1]), œÄ/2*(1 - Œ±[3,3]), 0)
  else
    Œ∂ = 1/sqrt(1-Œ±[3,3]*Œ±[3,3])
    ùú≠ = EulerAngles{Bunge,T}(atan(Œ±[3,1]*Œ∂, -Œ±[3,2]*Œ∂),
                             acos(Œ±[3,3]),
                             atan(Œ±[1,3]*Œ∂, Œ±[2,3]*Œ∂) )
  end

  return ùú≠
end

function EulerAngles(::Type{Bunge}, q::Quaternion{T}) where {T}
    s  = q.s
    v‚ÇÅ = q.v1
    v‚ÇÇ = q.v2
    v‚ÇÉ = q.v3

    s‚ÇÉ = s*s + v‚ÇÉv‚ÇÉ
    v‚ÇÅ‚ÇÇ = v‚ÇÅ*v‚ÇÅ + v‚ÇÇ*v‚ÇÇ
    œá   = ‚àö(s‚ÇÉ*v‚ÇÅ‚ÇÇ)

    if œá == 0
        if v‚ÇÅ‚ÇÇ == 0
            ùöπ = EulerAngles{Bunge,T}(atan(-2*P*s*v‚ÇÉ, s*s-v‚ÇÉ*v‚ÇÉ), 0, 0)
        elseif s‚ÇÉ == 0
            ùöπ = EulerAngles{Bunge,T}(atan(2*v‚ÇÅ*v‚ÇÇ, v‚ÇÅ*v‚ÇÅ-v‚ÇÇ*v‚ÇÇ), œÄ, 0)
        end
    else
      ùöπ = EulerAngles{Bunge}(atan((v‚ÇÅ*v‚ÇÉ - P*s*v2)/œá, (-P*s*v‚ÇÅ - v2*v‚ÇÉ)/œá),
                           atan(2*œá, s‚ÇÉ-v‚ÇÅ‚ÇÇ),
                           atan( (P*s*v2 + v‚ÇÅ*v‚ÇÉ)/œá, (v2*v‚ÇÉ - P*s*v‚ÇÅ)/œá ))
    end

  return ùöπ
end

## orientation ‚Üí 3x3 rotation matrix converters
"""
        rotation_matrix(euler_angles)

Converts EulerAngles representation ‚Üí 3x3 rotation matrix
"""
function rotation_matrix(ort::EulerAngles{Bunge,T}) where {T}
    c‚ÇÅ = cos(ort[1])
    c  = cos(ort[2])
    c‚ÇÇ = cos(ort[3])
    s‚ÇÅ = sin(ort[1])
    s  = sin(ort[2])
    s‚ÇÇ = sin(ort[3])

    return SMatrix{3,3,T}(c‚ÇÅ*c‚ÇÇ-s‚ÇÅ*c*s‚ÇÇ, -c‚ÇÅ*s‚ÇÇ-s‚ÇÅ*c*c‚ÇÇ,  s‚ÇÅ*s,
                          s‚ÇÅ*c‚ÇÇ+c‚ÇÅ*c*s‚ÇÇ, -s‚ÇÅ*s‚ÇÇ-c‚ÇÅ*c*c‚ÇÇ, -c‚ÇÅ*s,
                          s*s‚ÇÇ,             s*c‚ÇÇ,         c)
end

"""
        rotation_matrix(axis_angle)

Converts AxisAngle{AxisAng} representation ‚Üí 3x3 rotation matrix
"""
function rotation_matrix(ort::AxisAngle{AxisAng, T}) where {T}
    (n‚ÇÅ, n‚ÇÇ, n‚ÇÉ) = normalize(collect(ort.axis))
    œâ = ort.angle
    c = cos(œâ)
    s = sin(œâ)

    n‚ÇÅ‚ÇÇ = n‚ÇÅ*n‚ÇÇ
    n‚ÇÅ‚ÇÉ = n‚ÇÅ*n‚ÇÉ
    n‚ÇÇ‚ÇÉ = n‚ÇÇ*n‚ÇÉ

    return SMatrix{3,3,T}(c + (1-c)*n‚ÇÅ*n‚ÇÅ, (1-c)*n‚ÇÅ‚ÇÇ - s*n‚ÇÉ, (1-c)*n‚ÇÅ‚ÇÉ + s*n‚ÇÇ,
                          (1-c)*n‚ÇÅ‚ÇÇ + s*n‚ÇÉ, c + (1-c)*n‚ÇÇ*n‚ÇÇ, (1-c)*n‚ÇÇ‚ÇÉ - s*n‚ÇÅ,
                          (1-c)*n‚ÇÅ‚ÇÉ - s*n‚ÇÇ, (1-c)*n‚ÇÇ‚ÇÉ + s*n‚ÇÅ, c + (1-c)*n‚ÇÉ*n‚ÇÉ)
end

"""
        rotation_matrix(quaternion)

Converts Quaternion representation ‚Üí 3x3 rotation matrix
"""
function rotation_matrix(ort::Quaternion{T}) where {T}
    q = normalize(ort)
    q‚ÇÄ = q.s
    q‚ÇÅ = q.v1
    q‚ÇÇ = q.v2
    q‚ÇÉ = q.v3
    qÃÑ  = q‚ÇÄ*q‚ÇÄ - (q‚ÇÅ*q‚ÇÅ + q‚ÇÇ*q‚ÇÇ + q‚ÇÉ*q‚ÇÉ)

    return SMatrix{3,3,T}(qÃÑ + 2*q‚ÇÅ*q‚ÇÅ,  2(q‚ÇÅ*q‚ÇÇ + P*q‚ÇÄ*q‚ÇÉ),   2(q‚ÇÅ*q‚ÇÉ - P*q‚ÇÄ*q‚ÇÇ),
                          2(q‚ÇÅ*q‚ÇÇ - P*q‚ÇÄ*q‚ÇÉ),         qÃÑ + 2*q‚ÇÇ*q‚ÇÇ,   2(q‚ÇÇ*q‚ÇÉ + P*q‚ÇÄ*q‚ÇÅ),
                          2(q‚ÇÅ*q‚ÇÉ + P*q‚ÇÄ*q‚ÇÇ),  2(q‚ÇÇ*q‚ÇÉ - P*q‚ÇÄ*q‚ÇÅ),   qÃÑ + 2*q‚ÇÉ*q‚ÇÉ)
end


"""
    AxisAngle(AxisAng, euler_angle)

Converts EulerAngle ‚Üí AxisAngle{AxisAng}
"""
function AxisAngle(::Type{AxisAng}, ort::EulerAngles{Bunge,T}) where {T}
    (œï‚ÇÅ, Œ¶, œï‚ÇÇ) = ort.data
    t = tan(Œ¶/2)
    œÉ = (œï‚ÇÅ+œï‚ÇÇ)/2
    Œ¥ = (œï‚ÇÅ-œï‚ÇÇ)/2
    œÑ = sqrt(t*t + sin(œÉ)^2)

    ratio = P/œÑ
    axis  = (-ratio*t*cos(Œ¥), -ratio*t*sin(Œ¥), -ratio*sin(œÉ))
    Œ±     = 2*atan(œÑ/cos(œÉ))

    if Œ± > œÄ
        axis = .-axis
        Œ±    = 2œÄ-Œ±
    end

    return AxisAngle{T,AxisAng}(axis, angle)
end

"""
    AxisAngle(AxisAng, rodrigues_vec)

Converts RodriguesFrank vector ‚Üí AxisAngle{AxisAng}
"""
function AxisAngle(::Type{AxisAng}, ort::AxisAngle{RodriguesFrank,T}) where {T}
    œÅ = norm(ort.axis)
    œâ = 2*atan(œÅ)
    nÃÇ = ort.axis./œÅ
    return AxisAngle{T,AxisAng}(nÃÇ, œâ)
end

"""
    AxisAngle(AxisAng, quaternion)

Converts Quaternion ‚Üí AxisAngle{AxisAng}
"""
function AxisAngle(::Type{AxisAng}, ort::Quaternion{T}) where {T}
    q‚ÇÄ = ort.s
    q‚ÇÅ = ort.v1
    q‚ÇÇ = ort.v2
    q‚ÇÉ = ort.v3
    œâ  = 2*acos(q‚ÇÄ)

    if œâ ‚âà 0
        nÃÇ = (0, 0, 1)
    else
        if q‚ÇÄ ‚âà 0
            nÃÇ = (q‚ÇÅ, q‚ÇÇ, q‚ÇÉ)
            œâ = œÄ
        else
            s = sign(q‚ÇÄ)/sqrt(q‚ÇÅ*q‚ÇÅ + q‚ÇÇ*q‚ÇÇ + q‚ÇÉ*q‚ÇÉ)
            nÃÇ = (s*q‚ÇÅ, s*q‚ÇÇ, s*q‚ÇÉ)
        end
    end

    return AxisAngle{AxisAng}(nÃÇ, œâ)
end
